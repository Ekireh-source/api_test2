# from django.shortcuts import render
# from rest_framework.generics import GenericAPIView
# from rest_framework.response import Response
# from rest_framework import status

# #Create your views here.

# # class RegistrationView(GenericAPIView):
# #     serializer_class = UserSerializer

# #     def post(self, request):
# #         serializer = UserSerializer(data=request.data)

# #         if serializer.is_valid():
# #             serializer.save()
# #             return Response(serializer.data, status=status.HTTP_201_CREATED)

# #         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)




# from rest_framework import generics, permissions
# from rest_framework.response import Response
# from knox.models import AuthToken
# from .serializers import UserSerializer, RegisterSerializer
# from django.contrib.auth import login
# from rest_framework.authtoken.serializers import AuthTokenSerializer
# from knox.views import LoginView as KnoxLoginView
# from .models import User


# class RegisterAPI(generics.GenericAPIView):
#     serializer_class = RegisterSerializer

#     def post(self, request, *args, **kwargs):
#         serializer = self.get_serializer(data=request.data)
#         serializer.is_valid(raise_exception=True)
#         user = serializer.save()
#         return Response({
#             "user": UserSerializer(user, context=self.get_serializer_context()).data,
#             "token": AuthToken.objects.create(user)[1]
#         })



# class LoginAPI(KnoxLoginView):
#     permission_classes = (permissions.AllowAny,)

#     def post(self, request,format=None):
#         serializer = AuthTokenSerializer(data=request.data)
#         serializer.is_valid(raise_exception=True)
#         user = serializer.validated_data['user']
#         login(request, user)
#         return super(LoginAPI, self).post(request, format=None)






###serializer
# from dataclasses import fields
# from rest_framework import serializers
# from django.contrib.auth.models import User




# class UserSerializer(serializers.ModelSerializer):
#     password = serializers.CharField(max_length=65, min_length=8, write_only=True)
#     email = serializers.EmailField(max_length=255, min_length=2)
#     first_name= serializers.CharField(max_length=255, min_length=8)
#     last_name= serializers.CharField(max_length=255, min_length=8)



#     class Meta:
#         model = User
#         fields = ['username', 'first_name', 'last_name', 'email', 'password']

#     def validate(self, attrs):
#         email=attrs.get('email','')
#         if User.objects.filter(email=email).exists():
#             raise serializers.ValidationError({'email':('email already exists ')})
#         return super().validate(attrs)

#     def create(self, validated_data): 
#         return User.objects.create_user(**validated_data)


#from django.contrib.auth.models import User
# from rest_framework import serializers
# from .models import User

# #user serializer
# class UserSerializer(serializers.ModelSerializer):
#     class Meta:
#         model = User
#         fields =('email', 'password', 'phone_number', 'first_name', 'last_name')



# class RegisterSerializer(serializers.ModelSerializer):
#     class Meta:
#         model = User
#         fields =('email', 'password', 'phone_number', 'first_name', 'last_name')
#         extra_kwags = {'password': {'write_only': True}}


#     def create(self, validated_data):
#         user = User.objects.create_user(validated_data['first_name'], validated_data['phone_number'], validated_data['last_name'], validated_data['email'])
#         return user


